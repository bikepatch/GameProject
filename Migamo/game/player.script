local air_acceleration_factor = 0.8
local max_speed = 450
local gravity = -1900
local jump_takeoff_speed = 1200

local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("ground")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local anim_walk = hash("walk")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")

local socket = require "socket"

local clientSocket = socket.tcp()
clientSocket:settimeout(0)

function connectToServer(ip, port)
	local success, err = clientSocket:connect(ip, port)
	if not success then
		print("Connection error: " .. err)
	else
		print("Connected to server")
	end
end

function sendInputToServer(action_id, action)
	if clientSocket then
		clientSocket:send(action_id, action)
	else
		print("Socket not initialized")
	end
end

function receiveInputFromServer()
	local response, err = clientSocket:receive()
	if response then
		local action_id, action = json.decode(response)
		on_input(action_id, action)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	self.velocity = vmath.vector3(0, 0, 0)
	self.facing_direction = 0
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.anim = nil
	--connectToServer(127.0.0.1, 8080)
end

function play_animation(self, anim)
	if self.anim ~= anim then
		sprite.play_flipbook("#sprite", anim)
		self.anim = anim
	end
end

function update_animations(self)
	sprite.set_hflip("#sprite", self.facing_direction < 0)
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function fixed_update(self, dt)
	self.velocity.y = self.velocity.y + gravity * dt
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)
	update_animations(self)
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = (distance - distance * proj) * normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end

	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

function walk(self, direction)
	if direction ~= 0 then
		self.facing_direction = direction
	end
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function on_input(self, action_id, action)
	--sendInputToServer(action_id, action)
	handle_input(self, action_id, action)
end

function handle_input(self, action_id, action)
	if action_id == input_left then
		walk(self, -action.value)
	elseif action_id == input_right then
		walk(self, action.value)
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end