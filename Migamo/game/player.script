local json = require "json"
local websocket = require ("websocket.websocket")

local air_acceleration_factor = 0.8
local max_speed = 450
local gravity = -1900
local jump_takeoff_speed = 1200

local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("ground")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local anim_walk = hash("walk")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")


local ws_connection = nil

local other_players = {}

function connectToServer(url)
	ws_connection = websocket.create(url)

	function ws_connection.on_open()
		print("Connected to server via WebSocket")
	end

	function ws_connection.on_message(message)
		print("Received message: " .. message)
		local data = json.decode(message)
		if data then
			on_input(data.action_id, data.action)
		end
	end

	function ws_connection.on_close()
		print("WebSocket connection closed")
	end

	function ws_connection.on_error(error)
		print("WebSocket error: " .. error)
	end

	ws_connection.connect()
end

function sendInputToServer(action_id, action)
	if ws_connection then
		local op = {
			player_id = sys.get_save_file("my_game", "player_id"),
			action = action_id,
			op_id = tostring(socket.gettime()),
			timestamp = os.time()
		}
		local message = json.encode(op)
		ws_connection.send(message)
	else
		print("WebSocket not initialized")
	end
end

function createOtherPlayer(player_id)
	local pos = vmath.vector3(100, 100, 0) 
	local player_go = factory.create("#player_factory", pos)
	other_players[player_id] = player_go
	return player_go
end

function moveOtherPlayer(player_go, action)
	local direction = action == "MoveLeft" and -1 or 1
	local player_pos = go.get_position(player_go)
	player_pos.x = player_pos.x + direction * max_speed * air_acceleration_factor
	go.set_position(player_pos, player_go)
end

function jumpOtherPlayer(player_go)
	local player_pos = go.get_position(player_go)
	player_pos.y = player_pos.y + jump_takeoff_speed
	go.set_position(player_pos, player_go)
end

function removeOtherPlayer(player_id)
	if other_players[player_id] then
		go.delete(other_players[player_id])
		other_players[player_id] = nil
	end
end

function applyOperation(op)
	local player_go = other_players[op.player_id]
	if not player_go then
		player_go = createOtherPlayer(op.player_id)
	end

	if op.action == "MoveLeft" or op.action == "MoveRight" then
		moveOtherPlayer(player_go, op.action)
	elseif op.action == "Jump" then
		jumpOtherPlayer(player_go)
	elseif op.action == "remove" then
		removeOtherPlayer(op.player_id)
	end
end

function init(self)
	print("Initializing player...")
	msg.post(".", "acquire_input_focus")
	msg.post("#camera", "acquire_camera_focus")
	msg.post("@render:", "use_camera_projection")

	self.velocity = vmath.vector3(0, 0, 0)
	self.facing_direction = 0
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.anim = nil
	connectToServer("ws://127.0.0.1:8080")
end

function play_animation(self, anim)
	if self.anim ~= anim then
		sprite.play_flipbook("#sprite", anim)
		self.anim = anim
	end
end

function update_animations(self)
	sprite.set_hflip("#sprite", self.facing_direction < 0)
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		else
			play_animation(self, anim_walk)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function fixed_update(self, dt)
	self.velocity.y = self.velocity.y + gravity * dt
	local pos = go.get_position()
	pos = pos + self.velocity * dt
	go.set_position(pos)
	update_animations(self)
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false
end

local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			local comp = (distance - distance * proj) * normal
			go.set_position(go.get_position() + comp)
			self.correction = self.correction + comp
		end
	end

	if math.abs(normal.x) > 0.7 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	if normal.y > 0.7 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

function abort_jump(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity.y * 0.5
	end
end

function walk(self, direction)
	if direction ~= 0 then
		self.facing_direction = direction
	end
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

function on_message(self, message_id, message, sender)
	if message_id == msg_contact_point_response then
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

function on_input(self, action_id, action)
	sendInputToServer(action_id, action)
	handle_input(self, action_id, action)
end

function handle_input(self, action_id, action)
	if action_id == input_left then
		walk(self, -action.value)
	elseif action_id == input_right then
		walk(self, action.value)
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end
